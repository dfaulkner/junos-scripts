#!/bin/bash
# zoneips - show all IP addresses or networks in a zone
# 

IAM=$(basename $0)

# Global settings.

# Defaults, to be overridden by getopts below
FILE=current

usage ()
{
	echo -e "usage: ${IAM} [ -c config ] [ zone ]"
	echo -e ""
	echo -e "show all IP networks (CIDRs) in a zone"
	echo -e ""
	echo -e "  -h\t: display this help"
	echo -e "  -c\t: configuration file to read from. (default is \"${FILE}\")"
	echo -e "  zone\t: a valid zone in the junos config file"
}

while getopts :hc: option; do
	case "${option}" in
		h)	usage
			exit 0
			;;
		c)	if [ -f "${OPTARG}" ]; then
				FILE="${OPTARG}"
			else
				exec >&2
				echo "${IAM}: file ${OPTARG} doesn't exist"
				exit 1
			fi
			;;
		:)	exec >&2
			echo "${IAM} option -{$OPTARG} requires and argument."
			usage
			exit 1
			;;
		\?)	exec >&2
			echo "${IAM}: invalid option -{$OPTARG}."
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

if [[ $# = 1 ]]; then
	ZONE=$1
else
	usage
	exit 1
fi

if ! $(grep -q -m 1 "security zones security-zone ${ZONE}" ${FILE}); then
	exec >&2
	echo -e "${IAM}: zone ${ZONE} not found in ${FILE}."
	exit 1
fi

sortip()
{
	sort -n -t. -k1,1 -k2,2 -k3,3 -k4,4
}

# the basic idea:
grep "security zones security-zone $ZONE.*interfaces" ${FILE} | awk '{print $7}' \
	| awk -F. '{print "interfaces " $1 " unit " $2 " family inet address"}' \
	| grep -f - ${FILE} | awk '{print $9}' \
	| while read ip; do
		baseip="$(sipcalc $ip | grep 'Network address' | awk -F- '{print $2}')/$(echo $ip | awk -F/ '{print $2}')"
		echo $baseip
	done | sortip
	