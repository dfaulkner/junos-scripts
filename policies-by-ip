#!/bin/bash
# policies-by-ip - show junos policies for a particular IP.
# 
# Read a junos config file in "display set" format and output a list
# of policies that affect a given IP address based on source & 
# destination zone. For now, the IP is assumed the destination. 
# We'll probably add a source option eventually.

IAM=$(basename $0)

# Global settings.

# Defaults, to be overridden by getopts below
FILE=current
MASK=16
FROM_ZONE="[^ ]+"
TO_ZONE="[^ ]+"


usage ()
{
	echo -e "usage: ${IAM} [ -h ] [ -z ] -f from -t to ( -d destination ) [config]"
	echo -e ""
	echo -e "  -h\t: display this help"
	echo -e "  -f\t: match policies affecting flows from this zone (from-zone)"
	echo -e "  -t\t: match policies affecting flows to this zone (to-zone)"
	echo -e "  -d\t: match this destination IP (destination-address)"
	#echo -e "  -s\t: match this source IP (source-address)" #future 
	echo -e "  -z\t: include from/to zone labels in output"
	echo -e "  config\t: configuration file to read from. (default is \"${FILE}\")"
	echo -e ""
	echo -e "  IP addresses must be specified in dotted-quad format with and optional netmask"
	echo -e "  e.g. 127.0.0.1 or 127.0.0.1/24"
	echo -e "  If not specified, the netmask defaults to $MASK."
}


while getopts :hd:f:t:z option; do
	case "${option}" in
		h)	usage
			exit 0
			;;
		d)	# match address/mask first, then address alone.
			if [[ "${OPTARG}" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2}$ ]]
			then
				IP=$(echo $OPTARG | cut -d/ -f1)
				MASK=$(echo $OPTARG | cut -d/ -f2)
			elif [[ "${OPTARG}" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
			then
				IP=$(echo $OPTARG | cut -d/ -f1)
			else
				exec >&2
				echo "${IAM}: -${option} must specify an IP address with optional /mask"
				exit 1				
			fi
			;;
		f)	# test for valid zone below, because we don't know the file yet
			FROM_ZONE="${OPTARG}"
			;;
		t)	# test for valid zone below, because we don't know the file yet
			TO_ZONE="${OPTARG}"
			;;
		z)	PRINT_ZONES=true
			;;
		:)	exec >&2
			echo "${IAM} option -{$OPTARG} requires and argument."
			usage
			exit 1
			;;
		\?)	exec >&2
			echo "${IAM}: invalid option -{$OPTARG}."
			usage
			exit 1
			;;
	esac
done
shift $(($OPTIND - 1))

if [ -f "$1" ]; then 
	FILE="$1"
fi

if [[ ! $IP ]]; then
	exec >&2
	echo -e "${IAM}: must specify and IP address."
	exit 1
fi 

if ! $(grep -q -m 1 "security zones security-zone ${FROM_ZONE}" ${FILE}); then
	exec >&2
	echo -e "${IAM}: zone ${FROM_ZONE} not found in ${FILE}."
	exit 1
fi
if ! $(grep -q -m 1 "security zones security-zone ${TO_ZONE}" ${FILE}); then
	exec >&2
	echo -e "${IAM}: zone ${TO_ZONE} not found in ${FILE}."
	exit 1
fi


echo -en "$IP"
[ $PRINT_ZONES ] && echo -en "(${FROM_ZONE}:${TO_ZONE})"
echo -en "\t"
for i in `cidrblocks $IP/$MASK`; do egrep "${TO_ZONE} address-book.*$i" ${FILE} \
	| awk -v FROM="${FROM_ZONE}" -v TO="${TO_ZONE}" '{print FROM " to-zone " TO ".*destination-address " $8}' \
	| egrep -f - ${FILE} | awk -v FROM="${FROM_ZONE}" -v TO="${TO_ZONE}" '{print FROM " to-zone " TO " policy " $9 " then permit"}' \
	| egrep -f - ${FILE} | awk '{print $9}' | tr '\n' ' '
done
egrep "${FROM_ZONE} to-zone ${TO_ZONE}.*destination-address any" ${FILE} \
	| egrep -f - ${FILE} | awk -v FROM="${FROM_ZONE}" -v TO="${TO_ZONE}" '{print FROM " to-zone " TO " policy " $9 " then permit"}' \
	| awk '{print $9}' | tr '\n' ' '
echo;


